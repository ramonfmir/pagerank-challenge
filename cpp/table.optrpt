Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.126 Build 20171018

Compiler options: -qopenmp -qopt-report=5 -qopt-report-routine=pagerank -qopt-report-phase=vec,par,loop,openmp -O3 -o pagerank_test

Begin optimization report for: Table::pagerank(Table *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(982,20) inlined into table.cpp(313,8)
   remark #15389: vectorization support: reference *this->__end_ has unaligned access   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1547,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.007
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 19.000 
   remark #15478: estimated potential speedup: 1.050 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(982,20) inlined into table.cpp(313,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(206,20) inlined into table.cpp(313,8)
   remark #15389: vectorization support: reference *___v.___v has unaligned access   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1547,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.019
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 19.500 
   remark #15478: estimated potential speedup: 1.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(206,20) inlined into table.cpp(313,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at table.cpp(323,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at table.cpp(330,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at table.cpp(330,9)
      remark #15388: vectorization support: reference pr_size[k] has aligned access   [ table.cpp(331,28) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.675
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 2.960 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at table.cpp(330,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at table.cpp(330,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference pr_size[k] has unaligned access   [ table.cpp(331,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.120
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at table.cpp(330,9)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at table.cpp(346,13)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at table.cpp(346,13)
      remark #15388: vectorization support: reference old_pr.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE[i] has aligned access   [ table.cpp(347,23) ]
      remark #15388: vectorization support: reference pr_size[i] has aligned access   [ table.cpp(347,31) ]
      remark #15388: vectorization support: reference pr_size[i] has aligned access   [ table.cpp(348,17) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.105
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 35 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.810 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at table.cpp(346,13)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at table.cpp(346,13)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference old_pr.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE[i] has unaligned access   [ table.cpp(347,23) ]
      remark #15388: vectorization support: reference pr_size[i] has aligned access   [ table.cpp(347,31) ]
      remark #15388: vectorization support: reference pr_size[i] has aligned access   [ table.cpp(348,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.326
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at table.cpp(346,13)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at table.cpp(370,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between old_pr.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE.__b_NSt3_ (374:34) and this[*___w.___w] (378:15)
      remark #15346: vector dependence: assumed FLOW dependence between this[*___w.___w] (378:15) and old_pr.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE.__b_NSt3_ (374:34)

      LOOP BEGIN at table.cpp(376,11)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between this[*___w.___w] (378:15) and this[*___w.___w] (378:15)
         remark #15346: vector dependence: assumed ANTI dependence between this[*___w.___w] (378:15) and this[*___w.___w] (378:15)
      LOOP END

      LOOP BEGIN at table.cpp(376,11)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at table.cpp(385,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at table.cpp(385,9)
      remark #15388: vectorization support: reference this[i] has aligned access   [ table.cpp(386,13) ]
      remark #15389: vectorization support: reference this[i] has unaligned access   [ table.cpp(386,21) ]
      remark #15389: vectorization support: reference this[i] has unaligned access   [ table.cpp(387,26) ]
      remark #15388: vectorization support: reference old_pr.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE[i] has aligned access   [ table.cpp(387,38) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.358
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 25 
      remark #15477: vector cost: 15.000 
      remark #15478: estimated potential speedup: 1.630 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at table.cpp(385,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at table.cpp(385,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference this[i] has aligned access   [ table.cpp(386,13) ]
      remark #15389: vectorization support: reference this[i] has unaligned access   [ table.cpp(386,21) ]
      remark #15389: vectorization support: reference this[i] has unaligned access   [ table.cpp(387,26) ]
      remark #15389: vectorization support: reference old_pr.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE.__b_NSt3__113__vector_baseIdNS_9allocatorIdEEEE[i] has unaligned access   [ table.cpp(387,38) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.077
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Table::print_pagerank(Table *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at table.cpp(439,30)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream(741,14) ]
LOOP END
===========================================================================

Begin optimization report for: Table::print_pagerank_v(Table *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1974,5) inlined into table.cpp(457,33)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string(1313,13) inlined into table.cpp(457,33)
   remark #15389: vectorization support: reference ___a[___i] has unaligned access   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string(1314,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(278,5) inlined into table.cpp(457,33)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at table.cpp(455,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__locale(198,44) ]
LOOP END
===========================================================================
