Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.126 Build 20171018

Compiler options: -qopenmp -qopt-report=5 -qopt-report-routine=pagerank -qopt-report-phase=vec,par,loop,openmp -O3 -o pagerank_test

Begin optimization report for: Table::pagerank(Table *)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at table.cpp(324,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at table.cpp(338,13)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at table.cpp(363,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(1031,15) inlined into table.cpp(310,8)
   remark #15389: vectorization support: reference *this->__end_ has unaligned access   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1547,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.007
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 19.000 
   remark #15478: estimated potential speedup: 1.050 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/vector(1031,15) inlined into table.cpp(310,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(206,20) inlined into table.cpp(310,8)
   remark #15389: vectorization support: reference *___v.___v has unaligned access   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/memory(1547,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.019
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 19.500 
   remark #15478: estimated potential speedup: 1.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__split_buffer(206,20) inlined into table.cpp(310,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at table.cpp(318,5)
   remark #15523: loop was not vectorized: loop control variable num_iterations was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at table.cpp(324,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (328:13) and at (328:13)
LOOP END

LOOP BEGIN at table.cpp(324,9)
<Remainder>
LOOP END

LOOP BEGIN at table.cpp(338,13)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at table.cpp(338,13)
   remark #15388: vectorization support: reference old_pr has aligned access   [ table.cpp(341,23) ]
   remark #15389: vectorization support: reference *this->pr->__begin_[i] has unaligned access   [ table.cpp(341,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.104
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 18.000 
   remark #15478: estimated potential speedup: 1.700 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at table.cpp(338,13)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference old_pr has aligned access   [ table.cpp(341,23) ]
   remark #15389: vectorization support: reference *this->pr->__begin_[i] has unaligned access   [ table.cpp(341,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
LOOP END

LOOP BEGIN at table.cpp(364,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at table.cpp(371,13)
      remark #15389: vectorization support: reference ci._ci[iii] has unaligned access   [ table.cpp(373,45) ]
      remark #15389: vectorization support: reference ci._ci[iii] has unaligned access   [ table.cpp(380,35) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*this->num_outgoing->__begin_[*(ci._ci+iii*8)]>, 64-bit indexed, part of index is read from memory   [ table.cpp(373,44) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <old_pr>, 64-bit indexed, part of index is read from memory   [ table.cpp(380,34) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.264
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 59 
      remark #15477: vector cost: 43.500 
      remark #15478: estimated potential speedup: 1.350 
      remark #15486: divides: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at table.cpp(371,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Table::print_pagerank(Table *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at table.cpp(444,30)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/ostream(741,14) ]
LOOP END
===========================================================================

Begin optimization report for: Table::print_pagerank_v(Table *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(1974,5) inlined into table.cpp(462,33)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string(1313,13) inlined into table.cpp(462,33)
   remark #15389: vectorization support: reference ___a[___i] has unaligned access   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/string(1314,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__tree(278,5) inlined into table.cpp(462,33)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at table.cpp(460,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__locale(198,44) ]
LOOP END
===========================================================================
